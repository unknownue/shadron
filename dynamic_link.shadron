
#include <shapes>

parameter bool debug_grid = false;

const float gird_limit = 0.45;

const int NUM_LINE_GRID = 12;
const int LINE_CONNECTS[NUM_LINE_GRID * 2] = int[](
    4,0,  4,1,  4,2,  4,3,  4,5,  4,6,  4,7,  4,8,  1,3,  1,5,  3,7,  5,7
);

vec2 aspect_idependent_uv(vec2 pos) {
    vec2 fragCoord = pos * shadron_Dimensions;
    return (fragCoord - 0.5 * shadron_Dimensions) / shadron_Dimensions.y;
}

float drawline1(vec2 p, vec2 o, float angle) {
    angle += BASIC_ROTATE;
    vec2 n = vec2(cos(angle), sin(angle));
    float d = abs(dot(p - o, n));
    return smoothstep(fwidth(d), 0.0, d - 0.001);
}

float noise21(vec2 p) {
    p = fract(p * vec2(233.34, 851.73));
    p += dot(p, p + 23.45);
    return fract(p.x * p.y);
}

vec2 noise22(vec2 p) {
    float n = noise21(p);
    return vec2(n, noise21(p + n));
}

vec2 animate_point(vec2 gid, vec2 offset) {
    vec2 n = noise22(gid + offset) * shadron_Time;
    return offset + sin(n) * gird_limit;
}

float visual_point(vec2 uv, vec2 pos, float thinkness) {
    vec2 v = (uv - pos) * 30.0;
    float blink = sin(shadron_Time * 0.5 + pos.x * 20.0) * 0.5 + 0.5;
    float sparkle = 1.0 / dot(v, v);
    return sparkle * blink;
}

float connect_links(vec2 uv, vec2 gid) {
    vec2 p[9];
    int i = 0;
    for (float y = -1.0; y <= 1.0; y = y + 1.0) {
        for (float x = -1.0; x <= 1.0; x = x + 1.0) {
            p[i] = animate_point(gid, vec2(x, y));
            i++;
        }
    }

    float m = 0.0;
    for (int i = 0; i < NUM_LINE_GRID * 2; i += 2) {
        vec2 p1 = p[LINE_CONNECTS[i]];
        vec2 p2 = p[LINE_CONNECTS[i + 1]];
        float fade = smoothstep(1.2, 0.8, distance(p1, p2));
        m += lineSmooth(uv, p1, p2, 0.01, 0.01) * fade;
    }
    return m;
}

glsl vec4 dynamic_links_main(vec2 pos) {
    vec2 uv = aspect_idependent_uv(pos);

    uv *= 5.0;
    vec2 guv = fract(uv) - 0.5;  // uv in each grid, [-0.5, 0.5]
    vec2 gid = floor(uv);        // id for each grid

    vec2 p = noise22(gid) - 0.5;  // random position in grid, [-0.5, 0.5]
    vec3 c = vec3(0.0);

    vec2 ap = animate_point(gid, vec2(0.0));
    c += visual_point(guv, ap, 0.1);
    c += connect_links(guv, gid);
    
    if (debug_grid) {
        if (guv.x > 0.49 || guv.y > 0.49)
            c = vec3(1.0, 0.0, 0.0);
    }
    return vec4(c, 1.0);
}

animation dynamicLinks = glsl(dynamic_links_main, 1980, 1024): resizable(false);

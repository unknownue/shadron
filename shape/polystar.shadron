
#include <math_constants>

parameter float num_edge = 6.0: range(1.0, 12.0);
parameter float radius   = 0.25;
parameter float outside_radius = 0.27;
parameter float expand = 0.02;

parameter float rotate_angle = 0.0: range(0.0, 360.0);

const int width_split  = 20;
const int height_split = 20;
const float bright     = 0.2;

vec2 aspect_idependent_uv(vec2 pos) {
    vec2 fragCoord = pos * shadron_Dimensions;
    return (fragCoord - 0.5 * shadron_Dimensions) / shadron_Dimensions.y;
}

float radian(float a) {
    return a / 360.0 * 2.0 * PI;
}

float atan2(float y, float x) {
    return x == 0.0 ? sign(y) * PI / 2 : atan(y, x);
}

float draw_line(vec2 p, vec2 o, vec2 n) {
    float d = abs(dot(p - o, n));
    return smoothstep(fwidth(d), 0.0, d - 0.001);
}

float polystar_shape(vec2 pos, float r, float num_slice) {
    float a = atan2(pos.y, pos.x) + radian(rotate_angle);
    float b = 2.0 * PI / num_slice;

    a = mod(a + b / 2.0, b) - b / 2.0;
    float e = (floor(a / b) + 0.5) * b;
    vec2 p1 = normalize(vec2(sin(a), cos(a))) * length(pos);
    vec2 p2 = normalize(vec2(sin(e), cos(e))) * radius;
    vec2 n = vec2(cos(e), sin(e));
    return draw_line(p1, p2, n);
}

glsl vec4 polystar_main(vec2 pos) {
    vec2 uv = aspect_idependent_uv(pos);   // [-0.5, 0.5]
    float c = polystar_shape(uv, radius, num_edge);
    return vec4(c, c, c, 1.0);
}

image PolyStar = glsl(polystar_main, 2048, 1024): resizable(false);
